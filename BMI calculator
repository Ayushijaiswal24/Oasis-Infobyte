import tkinter as tk
from tkinter import messagebox, ttk
import sqlite3
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np


conn = sqlite3.connect('bmi_calculator.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS bmi_records (
        record_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        bmi REAL,
        category TEXT,
        date TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
''')
conn.commit()

def calculate_bmi(weight, height_m):
    return weight / (height_m ** 2)

def classify_bmi(bmi):
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 24.9:
        return "Normal weight"
    elif 25 <= bmi < 29.9:
        return "Overweight"
    else:
        return "Obesity"

def get_user_id(name):
    cursor.execute("SELECT user_id FROM users WHERE name = ?", (name,))
    result = cursor.fetchone()
    if result:
        return result[0]
    else:
        cursor.execute("INSERT INTO users (name) VALUES (?)", (name,))
        conn.commit()
        return cursor.lastrowid

def save_bmi_record(user_id, bmi, category):
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('''
        INSERT INTO bmi_records (user_id, bmi, category, date)
        VALUES (?, ?, ?, ?)
    ''', (user_id, bmi, category, date))
    conn.commit()

def calculate_and_save():
    name = name_entry.get().strip()
    try:
        weight = float(weight_entry.get())
        height_m = float(height_entry.get())
        if weight <= 0 or height_m <= 0:
            raise ValueError
    except ValueError:
        messagebox.showerror("Invalid Input", "Please enter valid positive numbers for weight and height.")
        return

    bmi = calculate_bmi(weight, height_m)
    category = classify_bmi(bmi)

    user_id = get_user_id(name)
    save_bmi_record(user_id, bmi, category)

    result_label.config(text=f"Your BMI is: {bmi:.2f}\nCategory: {category}")

def view_history():
    name = name_entry.get().strip()
    if not name:
        messagebox.showerror("Input Error", "Please enter your name to view history.")
        return

    cursor.execute("SELECT user_id FROM users WHERE name = ?", (name,))
    result = cursor.fetchone()
    if not result:
        messagebox.showinfo("No Records", "No records found for this user.")
        return

    user_id = result[0]
    cursor.execute('''
        SELECT bmi, category, date FROM bmi_records
        WHERE user_id = ?
        ORDER BY date ASC
    ''', (user_id,))
    records = cursor.fetchall()

    if not records:
        messagebox.showinfo("No Records", "No BMI records found for this user.")
        return

    history_window = tk.Toplevel(root)
    history_window.title(f"{name}'s BMI History")

    tree = ttk.Treeview(history_window, columns=('BMI', 'Category', 'Date'), show='headings')
    tree.heading('BMI', text='BMI')
    tree.heading('Category', text='Category')
    tree.heading('Date', text='Date')

    for record in records:
        tree.insert('', tk.END, values=record)

    tree.pack(fill=tk.BOTH, expand=True)

def visualize_trends():
    name = name_entry.get().strip()
    if not name:
        messagebox.showerror("Input Error", "Please enter your name to visualize trends.")
        return

    cursor.execute("SELECT user_id FROM users WHERE name = ?", (name,))
    result = cursor.fetchone()
    if not result:
        messagebox.showinfo("No Records", "No records found for this user.")
        return

    user_id = result[0]
    cursor.execute('''
        SELECT bmi, date FROM bmi_records
        WHERE user_id = ?
        ORDER BY date ASC
    ''', (user_id,))
    records = cursor.fetchall()

    if len(records) < 2:
        messagebox.showinfo("Insufficient Data", "Need at least two records to plot trends.")
        return

    bmi_values = [record[0] for record in records]
    dates = [datetime.strptime(record[1], "%Y-%m-%d %H:%M:%S") for record in records]

    plt.figure(figsize=(10, 5))
    plt.plot(dates, bmi_values, marker='o', linestyle='-', color='b', label='BMI')
    plt.title(f'BMI Trend for {name}')
    plt.xlabel('Date')
    plt.ylabel('BMI')
    plt.grid(True)
    plt.tight_layout()
    plt.legend()
    plt.show()

def clear_fields():
    name_entry.delete(0, tk.END)
    weight_entry.delete(0, tk.END)
    height_entry.delete(0, tk.END)
    result_label.config(text="")

root = tk.Tk()
root.title("Advanced BMI Calculator")
root.geometry("400x400")
root.resizable(False, False)

tk.Label(root, text="Name:", font=("Helvetica", 12)).pack(pady=5)
name_entry = tk.Entry(root, width=30)
name_entry.pack(pady=5)

tk.Label(root, text="Weight (kg):", font=("Helvetica", 12)).pack(pady=5)
weight_entry = tk.Entry(root, width=30)
weight_entry.pack(pady=5)

tk.Label(root, text="Height (m):", font=("Helvetica", 12)).pack(pady=5)
height_entry = tk.Entry(root, width=30)
height_entry.pack(pady=5)

calc_button = tk.Button(root, text="Calculate BMI", command=calculate_and_save, bg="green", fg="white")
calc_button.pack(pady=10)

result_label = tk.Label(root, text="", font=("Helvetica", 12), fg="blue")
result_label.pack(pady=5)

history_button = tk.Button(root, text="View History", command=view_history, bg="blue", fg="white")
history_button.pack(pady=5)

visualize_button = tk.Button(root, text="Visualize Trends", command=visualize_trends, bg="purple", fg="white")
visualize_button.pack(pady=5)

clear_button = tk.Button(root, text="Clear", command=clear_fields, bg="grey", fg="white")
clear_button.pack(pady=10)

root.mainloop()

conn.close()
